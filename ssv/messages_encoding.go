// Code generated by fastssz. DO NOT EDIT.
// Hash: 7f17928a3973a6884163a9588caa8a95dd3c2a856beedad9439c737ac013edee
package ssv

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/bloxapp/ssv-spec/types"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PartialSignature object
func (p *PartialSignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignature object to a target array
func (p *PartialSignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(p.Slot))

	// Field (1) 'Signature'
	if len(p.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.Signature...)

	// Field (2) 'SigningRoot'
	if len(p.SigningRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.SigningRoot...)

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignature object
func (p *PartialSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 136 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	p.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Signature'
	if cap(p.Signature) == 0 {
		p.Signature = make([]byte, 0, len(buf[8:104]))
	}
	p.Signature = append(p.Signature, buf[8:104]...)

	// Field (2) 'SigningRoot'
	if cap(p.SigningRoot) == 0 {
		p.SigningRoot = make([]byte, 0, len(buf[104:136]))
	}
	p.SigningRoot = append(p.SigningRoot, buf[104:136]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignature object
func (p *PartialSignature) SizeSSZ() (size int) {
	size = 136
	return
}

// HashTreeRoot ssz hashes the PartialSignature object
func (p *PartialSignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignature object with a hasher
func (p *PartialSignature) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(p.Slot))

	// Field (1) 'Signature'
	if len(p.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.Signature)

	// Field (2) 'SigningRoot'
	if len(p.SigningRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.SigningRoot)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedPartialSignatures object
func (s *SignedPartialSignatures) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedPartialSignatures object to a target array
func (s *SignedPartialSignatures) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Offset (0) 'PartialSignatures'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.PartialSignatures) * 136

	// Field (1) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Signature...)

	// Field (2) 'Signer'
	dst = ssz.MarshalUint64(dst, uint64(s.Signer))

	// Field (0) 'PartialSignatures'
	if len(s.PartialSignatures) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.PartialSignatures); ii++ {
		if dst, err = s.PartialSignatures[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedPartialSignatures object
func (s *SignedPartialSignatures) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'PartialSignatures'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[4:100]))
	}
	s.Signature = append(s.Signature, buf[4:100]...)

	// Field (2) 'Signer'
	s.Signer = types.OperatorID(ssz.UnmarshallUint64(buf[100:108]))

	// Field (0) 'PartialSignatures'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 136, 13)
		if err != nil {
			return err
		}
		s.PartialSignatures = make([]*PartialSignature, num)
		for ii := 0; ii < num; ii++ {
			if s.PartialSignatures[ii] == nil {
				s.PartialSignatures[ii] = new(PartialSignature)
			}
			if err = s.PartialSignatures[ii].UnmarshalSSZ(buf[ii*136 : (ii+1)*136]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedPartialSignatures object
func (s *SignedPartialSignatures) SizeSSZ() (size int) {
	size = 108

	// Field (0) 'PartialSignatures'
	size += len(s.PartialSignatures) * 136

	return
}

// HashTreeRoot ssz hashes the SignedPartialSignatures object
func (s *SignedPartialSignatures) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedPartialSignatures object with a hasher
func (s *SignedPartialSignatures) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PartialSignatures'
	{
		subIndx := hh.Index()
		num := uint64(len(s.PartialSignatures))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.PartialSignatures {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (1) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.Signature)

	// Field (2) 'Signer'
	hh.PutUint64(uint64(s.Signer))

	hh.Merkleize(indx)
	return
}
