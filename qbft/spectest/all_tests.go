package spectest

import (
	"testing"
)

type SpecTest interface {
	TestName() string
	Run(t *testing.T)
}

var AllTests = []SpecTest{
	//	//timeout.FirstRound(),
	//	//timeout.Round1(),
	//	//timeout.Round2(),
	//	//timeout.Round3(),
	//	//timeout.Round4(),
	//	//timeout.Round5(),
	//	//timeout.Round10(),
	//	//timeout.Round20(),
	//	//timeout.RoundTimeout(),
	//	//timeout.ErrorOnBroadcast(),
	//	//timeout.ErrorOnCreateMsg(),
	//
	//controller.StartInstanceFirstHeight(),
	//controller.StartInstancePreviousDecided(),
	//controller.StartInstancePreviousNotDecided(),
	//controller.StartInstanceInvalidValue(),
	//controller.FirstDecided(),
	//controller.InvalidIdentifier(),
	//controller.NoInstanceRunning(),
	//controller.NotFirstDecided(),
	//controller.NotDecided(),
	//controller.ProcessMsgError(),
	//controller.SavedAndBroadcastedDecided(),
	//
	//proposer.FourOperators(),
	//proposer.SevenOperators(),
	//proposer.TenOperators(),
	//proposer.ThirteenOperators(),
	//
	//messages.RoundChangeDataInvalidJustifications(),
	//messages.RoundChangeDataInvalidPreparedRound(),
	//messages.RoundChangeDataInvalidPreparedValue(),
	//messages.RoundChangePrePreparedJustifications(),
	//messages.RoundChangeNotPreparedJustifications(),
	//messages.CommitDataEncoding(),
	//// TODO<olegshmuelov>: write new tests for identifier
	////messages.MsgNilIdentifier(),
	////messages.MsgNonZeroIdentifier(),
	//// TODO<olegshmuelov>: write new test for msg type
	////messages.MsgTypeUnknown(),
	//messages.PrepareDataEncoding(),
	//messages.ProposeDataEncoding(),
	//messages.MsgDataNil(),
	//messages.MsgDataNonZero(),
	//messages.SignedMsgSigTooShort(),
	//messages.SignedMsgSigTooLong(),
	//messages.SignedMsgNoSigners(),
	//messages.SignedMsgDuplicateSigners(),
	//messages.SignedMsgMultiSigners(),
	//messages.GetRoot(),
	//messages.SignedMessageEncoding(),
	//messages.CreateProposal(),
	//messages.CreateProposalPreviouslyPrepared(),
	//messages.CreateProposalNotPreviouslyPrepared(),
	//messages.CreatePrepare(),
	//messages.CreateCommit(),
	//messages.CreateRoundChange(),
	//messages.CreateRoundChangePreviouslyPrepared(),
	//messages.RoundChangeDataEncoding(),
	//// TODO<olegshmuelov>: irrelevant tests, write tests for consensus data
	//messages.PrepareDataInvalid(),
	//messages.CommitDataInvalid(),
	//messages.ProposalDataInvalid(),
	//
	//tests.HappyFlow(),
	//tests.SevenOperators(),
	//tests.TenOperators(),
	//tests.ThirteenOperators(),
	//
	//proposal.CurrentRoundPrevNotPrepared(),
	//proposal.CurrentRoundPrevPrepared(),
	//proposal.PastRoundProposalPrevPrepared(),
	//proposal.NotPreparedPreviouslyJustification(),
	//proposal.PreparedPreviouslyJustification(),
	//proposal.DifferentJustifications(),
	//proposal.JustificationsNotHeighest(),
	//proposal.JustificationsValueNotJustified(),
	//proposal.DuplicateMsg(),
	//proposal.DuplicateMsgDifferentValue(),
	//proposal.FirstRoundJustification(),
	//proposal.FutureRoundPrevNotPrepared(),
	//proposal.FutureRound(),
	//proposal.ImparsableProposalData(),
	//proposal.InvalidRoundChangeJustificationPrepared(),
	//proposal.InvalidRoundChangeJustification(),
	//proposal.PreparedPreviouslyNoRCJustificationQuorum(),
	//proposal.NoRCJustification(),
	//proposal.PreparedPreviouslyNoPrepareJustificationQuorum(),
	//proposal.PreparedPreviouslyDuplicatePrepareMsg(),
	//proposal.PreparedPreviouslyDuplicatePrepareQuorum(),
	//proposal.PreparedPreviouslyDuplicateRCMsg(),
	//proposal.PreparedPreviouslyDuplicateRCQuorum(),
	//proposal.DuplicateRCMsg(),
	//proposal.InvalidPrepareJustificationValue(),
	//proposal.InvalidPrepareJustificationRound(),
	//proposal.InvalidProposalData(),
	//proposal.InvalidValueCheck(),
	//proposal.MultiSigner(),
	//proposal.PostDecided(),
	//proposal.PostPrepared(),
	//proposal.SecondProposalForRound(),
	//proposal.WrongHeight(),
	//proposal.WrongProposer(),
	//proposal.WrongSignature(),
	//proposal.UnknownSigner(),
	//
	//prepare.DuplicateMsg(),
	//prepare.HappyFlow(),
	////prepare.ImparsableProposalData(),
	//prepare.InvalidPrepareData(),
	//prepare.MultiSigner(),
	//prepare.NoPreviousProposal(),
	//prepare.OldRound(),
	//prepare.FutureRound(),
	//prepare.PostDecided(),
	//prepare.WrongData(),
	//prepare.WrongHeight(),
	//prepare.WrongSignature(),
	//prepare.UnknownSigner(),
	//
	//commit.CurrentRound(),
	//commit.FutureRound(),
	//commit.PastRound(),
	//commit.DuplicateMsg(),
	//commit.HappyFlow(),
	//commit.InvalidCommitData(),
	//commit.PostDecided(),
	//commit.WrongData1(),
	//commit.WrongData2(),
	//commit.MultiSignerWithOverlap(),
	//commit.MultiSignerNoOverlap(),
	//commit.DuplicateSigners(),
	//commit.NoPrevAcceptedProposal(),
	//commit.WrongHeight(),
	////commit.ImparsableCommitData(),
	//commit.WrongSignature(),
	//commit.UnknownSigner(),
	//commit.InvalidValCheck(),
	//
	//decided.UnknownSigner(),
	//decided.WrongSignature(),
	//decided.WrongHeight(),
	//decided.PostDecided(),
	//decided.SecondMsg(),
	//decided.PastRound(),
	//decided.NoPrevAcceptedProposal(),
	//decided.InvalidValCheckData(),
	//decided.InvalidData(),
	////decided.ImparsableData(),
	//decided.FutureRound(),
	//decided.DuplicateSigners(),
	//decided.DuplicateMsg(),
	//decided.PrevCommitOverlap(),
	//decided.CurrentRound(),
	//
	//roundchange.HappyFlow(),
	//roundchange.WrongHeight(),
	//roundchange.WrongSig(),
	//roundchange.UnknownSigner(),
	//roundchange.MultiSigner(),
	//roundchange.QuorumNotPrepared(),
	//roundchange.QuorumPrepared(),
	//roundchange.PeerPrepared(),
	//roundchange.PeerPreparedDifferentHeights(),
	//roundchange.JustificationWrongValue(),
	//roundchange.JustificationWrongRound(),
	//roundchange.JustificationNoQuorum(),
	//roundchange.JustificationMultiSigners(),
	//roundchange.JustificationInvalidSig(),
	//roundchange.JustificationInvalidRound(),
	//roundchange.JustificationInvalidPrepareData(),
	//roundchange.JustificationDuplicateMsg(),
	//roundchange.InvalidRoundChangeData(),
	//roundchange.F1DifferentFutureRounds(),
	//roundchange.F1DifferentFutureRoundsNotPrepared(),
	//roundchange.PastRound(),
	//roundchange.DuplicateMsgQuorum(),
	//roundchange.DuplicateMsgQuorumPreparedRCFirst(),
	//roundchange.DuplicateMsg(),
	//roundchange.ImparsableRoundChangeData(),
	//roundchange.NotProposer(),
	//roundchange.ValidJustification(),
	//roundchange.F1DuplicateSigner(),
	//roundchange.F1DuplicateSignerNotPrepared(),
	//roundchange.F1Speedup(),
	//roundchange.F1SpeedupPrevPrepared(),
	//roundchange.AfterProposal(),
}
