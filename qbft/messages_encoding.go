// Code generated by fastssz. DO NOT EDIT.
// Hash: bd6bc0287c2bd2a01784dd3980bc943aa5b6ad647c4941d8c282a1683abd2e66
package qbft

import (
	"github.com/bloxapp/ssv-spec/types"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ProposalData object
func (p *ProposalData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the ProposalData object to a target array
func (p *ProposalData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Data)

	// Offset (1) 'RoundChangeJustification'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(p.RoundChangeJustification); ii++ {
		offset += 4
		offset += p.RoundChangeJustification[ii].SizeSSZ()
	}

	// Offset (2) 'PrepareJustification'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(p.PrepareJustification); ii++ {
		offset += 4
		offset += p.PrepareJustification[ii].SizeSSZ()
	}

	// Field (0) 'Data'
	if len(p.Data) > 1161 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.Data...)

	// Field (1) 'RoundChangeJustification'
	if len(p.RoundChangeJustification) > 10 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(p.RoundChangeJustification)
		for ii := 0; ii < len(p.RoundChangeJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += p.RoundChangeJustification[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(p.RoundChangeJustification); ii++ {
		if dst, err = p.RoundChangeJustification[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'PrepareJustification'
	if len(p.PrepareJustification) > 10 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(p.PrepareJustification)
		for ii := 0; ii < len(p.PrepareJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += p.PrepareJustification[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(p.PrepareJustification); ii++ {
		if dst, err = p.PrepareJustification[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ProposalData object
func (p *ProposalData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Data'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'RoundChangeJustification'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'PrepareJustification'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Data'
	{
		buf = tail[o0:o1]
		if len(buf) > 1161 {
			return ssz.ErrBytesLength
		}
		if cap(p.Data) == 0 {
			p.Data = make([]byte, 0, len(buf))
		}
		p.Data = append(p.Data, buf...)
	}

	// Field (1) 'RoundChangeJustification'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 10)
		if err != nil {
			return err
		}
		p.RoundChangeJustification = make([]*SignedMessage, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if p.RoundChangeJustification[indx] == nil {
				p.RoundChangeJustification[indx] = new(SignedMessage)
			}
			if err = p.RoundChangeJustification[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'PrepareJustification'
	{
		buf = tail[o2:]
		num, err := ssz.DecodeDynamicLength(buf, 10)
		if err != nil {
			return err
		}
		p.PrepareJustification = make([]*SignedMessage, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if p.PrepareJustification[indx] == nil {
				p.PrepareJustification[indx] = new(SignedMessage)
			}
			if err = p.PrepareJustification[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ProposalData object
func (p *ProposalData) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Data'
	size += len(p.Data)

	// Field (1) 'RoundChangeJustification'
	for ii := 0; ii < len(p.RoundChangeJustification); ii++ {
		size += 4
		size += p.RoundChangeJustification[ii].SizeSSZ()
	}

	// Field (2) 'PrepareJustification'
	for ii := 0; ii < len(p.PrepareJustification); ii++ {
		size += 4
		size += p.PrepareJustification[ii].SizeSSZ()
	}

	return
}

//// HashTreeRoot ssz hashes the ProposalData object
//func (p *ProposalData) HashTreeRoot() ([32]byte, error) {
//	return ssz.HashWithDefaultHasher(p)
//}
//
//// HashTreeRootWith ssz hashes the ProposalData object with a hasher
//func (p *ProposalData) HashTreeRootWith(hh *ssz.Hasher) (err error) {
//	indx := hh.Index()
//
//	// Field (0) 'Data'
//	{
//		elemIndx := hh.Index()
//		byteLen := uint64(len(p.Data))
//		if byteLen > 1161 {
//			err = ssz.ErrIncorrectListSize
//			return
//		}
//		hh.PutBytes(p.Data)
//		hh.MerkleizeWithMixin(elemIndx, byteLen, (1161+31)/32)
//	}
//
//	// Field (1) 'RoundChangeJustification'
//	{
//		subIndx := hh.Index()
//		num := uint64(len(p.RoundChangeJustification))
//		if num > 10 {
//			err = ssz.ErrIncorrectListSize
//			return
//		}
//		for _, elem := range p.RoundChangeJustification {
//			if err = elem.HashTreeRootWith(hh); err != nil {
//				return
//			}
//		}
//		hh.MerkleizeWithMixin(subIndx, num, 10)
//	}
//
//	// Field (2) 'PrepareJustification'
//	{
//		subIndx := hh.Index()
//		num := uint64(len(p.PrepareJustification))
//		if num > 10 {
//			err = ssz.ErrIncorrectListSize
//			return
//		}
//		for _, elem := range p.PrepareJustification {
//			if err = elem.HashTreeRootWith(hh); err != nil {
//				return
//			}
//		}
//		hh.MerkleizeWithMixin(subIndx, num, 10)
//	}
//
//	hh.Merkleize(indx)
//	return
//}

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	mSSZ := &messageSSZ{
		MsgType:    uint8(int8(m.MsgType)),
		Height:     uint64(int64(m.Height)),
		Round:      m.Round,
		Identifier: m.Identifier,
		Data:       m.Data,
	}
	return ssz.MarshalSSZ(mSSZ)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var mSSZ messageSSZ
	if err := mSSZ.UnmarshalSSZ(buf); err != nil {
		return err
	}

	m.MsgType = MessageType(int8(mSSZ.MsgType))
	m.Height = Height(int64(mSSZ.Height))
	m.Round = mSSZ.Round
	m.Identifier = mSSZ.Identifier
	m.Data = mSSZ.Data

	return nil
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 25

	// Field (3) 'Identifier'
	size += len(m.Identifier)

	// Field (4) 'Data'
	size += len(m.Data)

	return
}

// MarshalSSZ ssz marshals the messageSSZ object
func (m *messageSSZ) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the messageSSZ object to a target array
func (m *messageSSZ) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(25)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint8(dst, m.MsgType)

	// Field (1) 'Height'
	dst = ssz.MarshalUint64(dst, uint64(m.Height))

	// Field (2) 'Round'
	dst = ssz.MarshalUint64(dst, uint64(m.Round))

	// Offset (3) 'Identifier'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Identifier)

	// Offset (4) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Data)

	// Field (3) 'Identifier'
	if len(m.Identifier) > 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.Identifier...)

	// Field (4) 'Data'
	if len(m.Data) > 2000 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the messageSSZ object
func (m *messageSSZ) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 25 {
		return ssz.ErrSize
	}

	tail := buf
	var o3, o4 uint64

	// Field (0) 'MsgType'
	m.MsgType = ssz.UnmarshallUint8(buf[0:1])

	// Field (1) 'Height'
	m.Height = uint64(ssz.UnmarshallUint64(buf[1:9]))

	// Field (2) 'Round'
	m.Round = Round(ssz.UnmarshallUint64(buf[9:17]))

	// Offset (3) 'Identifier'
	if o3 = ssz.ReadOffset(buf[17:21]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 25 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (4) 'Data'
	if o4 = ssz.ReadOffset(buf[21:25]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (3) 'Identifier'
	{
		buf = tail[o3:o4]
		if len(buf) > 96 {
			return ssz.ErrBytesLength
		}
		if cap(m.Identifier) == 0 {
			m.Identifier = make([]byte, 0, len(buf))
		}
		m.Identifier = append(m.Identifier, buf...)
	}

	// Field (4) 'Data'
	{
		buf = tail[o4:]
		if len(buf) > 2000 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the messageSSZ object
func (m *messageSSZ) SizeSSZ() (size int) {
	size = 25

	// Field (3) 'Identifier'
	size += len(m.Identifier)

	// Field (4) 'Data'
	size += len(m.Data)

	return
}

// HashTreeRoot ssz hashes the messageSSZ object
func (m *messageSSZ) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the messageSSZ object with a hasher
func (m *messageSSZ) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint8(m.MsgType)

	// Field (1) 'Height'
	hh.PutUint64(uint64(m.Height))

	// Field (2) 'Round'
	hh.PutUint64(uint64(m.Round))

	// Field (3) 'Identifier'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Identifier))
		if byteLen > 96 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.Identifier)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (96+31)/32)
	}

	// Field (4) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 2000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2000+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedMessage object
func (s *SignedMessage) MarshalSSZ() ([]byte, error) {

	signers := make([]uint64, 0, len(s.Signers))
	for _, signer := range s.Signers {
		signers = append(signers, uint64(signer))
	}

	smSSZ := &signedMessageSSZ{
		Signature: s.Signature,
		Signers:   signers,
		Message:   s.Message,
	}
	return ssz.MarshalSSZ(smSSZ)
}

// MarshalSSZTo ssz marshals the SignedMessage object to a target array
func (s *SignedMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessage object
func (s *SignedMessage) UnmarshalSSZ(buf []byte) error {
	var smSSZ signedMessageSSZ
	if err := smSSZ.UnmarshalSSZ(buf); err != nil {
		return err
	}

	s.Signature = smSSZ.Signature
	s.Signers = make([]types.OperatorID, 0, len(smSSZ.Signers))
	for _, signer := range smSSZ.Signers {
		s.Signers = append(s.Signers, types.OperatorID(signer))
	}
	s.Message = &Message{
		MsgType:    MessageType(int8(smSSZ.Message.MsgType)),
		Height:     smSSZ.Message.Height,
		Round:      smSSZ.Message.Round,
		Identifier: smSSZ.Message.Identifier,
		Data:       smSSZ.Message.Data,
	}

	return nil
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessage object
func (s *SignedMessage) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Signature'
	size += len(s.Signature)

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	// Field (2) 'Message'
	if s.Message == nil {
		s.Message = new(Message)
	}
	size += s.Message.SizeSSZ()

	return
}

//// HashTreeRoot ssz hashes the SignedMessage object
//func (s *SignedMessage) HashTreeRoot() ([32]byte, error) {
//	return ssz.HashWithDefaultHasher(s)
//}
//
//// HashTreeRootWith ssz hashes the SignedMessage object with a hasher
//func (s *SignedMessage) HashTreeRootWith(hh *ssz.Hasher) (err error) {
//	indx := hh.Index()
//
//	// Field (0) 'Signature'
//	{
//		elemIndx := hh.Index()
//		byteLen := uint64(len(s.Signature))
//		if byteLen > 100 {
//			err = ssz.ErrIncorrectListSize
//			return
//		}
//		hh.PutBytes(s.Signature)
//		hh.MerkleizeWithMixin(elemIndx, byteLen, (100+31)/32)
//	}
//
//	// Field (1) 'Signers'
//	{
//		if len(s.Signers) > 7 {
//			err = ssz.ErrListTooBig
//			return
//		}
//		subIndx := hh.Index()
//		for _, i := range s.Signers {
//			hh.AppendUint64(i)
//		}
//		hh.FillUpTo32()
//		numItems := uint64(len(s.Signers))
//		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(7, numItems, 8))
//	}
//
//	// Field (2) 'Message'
//	if err = s.Message.HashTreeRootWith(hh); err != nil {
//		return
//	}
//
//	hh.Merkleize(indx)
//	return
//}

// MarshalSSZ ssz marshals the signedMessageSSZ object
func (s *signedMessageSSZ) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the signedMessageSSZ object to a target array
func (s *signedMessageSSZ) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signature)

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Offset (2) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	if s.Message == nil {
		s.Message = new(Message)
	}
	offset += s.Message.SizeSSZ()

	// Field (0) 'Signature'
	if len(s.Signature) > 100 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Signature...)

	// Field (1) 'Signers'
	if len(s.Signers) > 7 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, s.Signers[ii])
	}

	// Field (2) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the signedMessageSSZ object
func (s *signedMessageSSZ) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Signature'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Message'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Signature'
	{
		buf = tail[o0:o1]
		if len(buf) > 100 {
			return ssz.ErrBytesLength
		}
		if cap(s.Signature) == 0 {
			s.Signature = make([]byte, 0, len(buf))
		}
		s.Signature = append(s.Signature, buf...)
	}

	// Field (1) 'Signers'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 8, 7)
		if err != nil {
			return err
		}
		s.Signers = ssz.ExtendUint64(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (2) 'Message'
	{
		buf = tail[o2:]
		if s.Message == nil {
			s.Message = new(Message)
		}
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the signedMessageSSZ object
func (s *signedMessageSSZ) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Signature'
	size += len(s.Signature)

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	// Field (2) 'Message'
	if s.Message == nil {
		s.Message = new(Message)
	}
	size += s.Message.SizeSSZ()

	return
}

//// HashTreeRoot ssz hashes the signedMessageSSZ object
//func (s *signedMessageSSZ) HashTreeRoot() ([32]byte, error) {
//	return ssz.HashWithDefaultHasher(s)
//}
//
//// HashTreeRootWith ssz hashes the signedMessageSSZ object with a hasher
//func (s *signedMessageSSZ) HashTreeRootWith(hh *ssz.Hasher) (err error) {
//	indx := hh.Index()
//
//	// Field (0) 'Signature'
//	{
//		elemIndx := hh.Index()
//		byteLen := uint64(len(s.Signature))
//		if byteLen > 100 {
//			err = ssz.ErrIncorrectListSize
//			return
//		}
//		hh.PutBytes(s.Signature)
//		hh.MerkleizeWithMixin(elemIndx, byteLen, (100+31)/32)
//	}
//
//	// Field (1) 'Signers'
//	{
//		if len(s.Signers) > 7 {
//			err = ssz.ErrListTooBig
//			return
//		}
//		subIndx := hh.Index()
//		for _, i := range s.Signers {
//			hh.AppendUint64(i)
//		}
//		hh.FillUpTo32()
//		numItems := uint64(len(s.Signers))
//		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(7, numItems, 8))
//	}
//
//	// Field (2) 'Message'
//	if err = s.Message.HashTreeRootWith(hh); err != nil {
//		return
//	}
//
//	hh.Merkleize(indx)
//	return
//}
