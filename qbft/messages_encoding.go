// Code generated by fastssz. DO NOT EDIT.
// Hash: 0b051450485aa50c2745c3dc6f1c80deb37cd64c54cb501fe5795a59ac9fd6bf
package qbft

import (
	"github.com/bloxapp/ssv-spec/types"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Field (0) 'Height'
	dst = ssz.MarshalUint64(dst, uint64(m.Height))

	// Field (1) 'Round'
	dst = ssz.MarshalUint64(dst, uint64(m.Round))

	// Offset (2) 'Input'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Input)

	// Field (3) 'PreparedRound'
	dst = ssz.MarshalUint64(dst, uint64(m.PreparedRound))

	// Field (2) 'Input'
	if len(m.Input) > 387173 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.Input...)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Height'
	m.Height = Height(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Round'
	m.Round = Round(ssz.UnmarshallUint64(buf[8:16]))

	// Offset (2) 'Input'
	if o2 = ssz.ReadOffset(buf[16:20]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 28 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'PreparedRound'
	m.PreparedRound = Round(ssz.UnmarshallUint64(buf[20:28]))

	// Field (2) 'Input'
	{
		buf = tail[o2:]
		if len(buf) > 387173 {
			return ssz.ErrBytesLength
		}
		if cap(m.Input) == 0 {
			m.Input = make([]byte, 0, len(buf))
		}
		m.Input = append(m.Input, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 28

	// Field (2) 'Input'
	size += len(m.Input)

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Height'
	hh.PutUint64(uint64(m.Height))

	// Field (1) 'Round'
	hh.PutUint64(uint64(m.Round))

	// Field (2) 'Input'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Input))
		if byteLen > 387173 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.Input)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (387173+31)/32)
	}

	// Field (3) 'PreparedRound'
	hh.PutUint64(uint64(m.PreparedRound))

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedMessage object
func (s *SignedMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedMessage object to a target array
func (s *SignedMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(112)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	if s.Message == nil {
		s.Message = new(Message)
	}
	offset += s.Message.SizeSSZ()

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Signature...)

	// Offset (3) 'RoundChangeJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		offset += 4
		offset += s.RoundChangeJustifications[ii].SizeSSZ()
	}

	// Offset (4) 'ProposalJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		offset += 4
		offset += s.ProposalJustifications[ii].SizeSSZ()
	}

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Signers'
	if len(s.Signers) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(s.Signers[ii]))
	}

	// Field (3) 'RoundChangeJustifications'
	if len(s.RoundChangeJustifications) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.RoundChangeJustifications)
		for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.RoundChangeJustifications[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		if dst, err = s.RoundChangeJustifications[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (4) 'ProposalJustifications'
	if len(s.ProposalJustifications) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.ProposalJustifications)
		for ii := 0; ii < len(s.ProposalJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.ProposalJustifications[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		if dst, err = s.ProposalJustifications[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessage object
func (s *SignedMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 112 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3, o4 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 112 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[8:104]))
	}
	s.Signature = append(s.Signature, buf[8:104]...)

	// Offset (3) 'RoundChangeJustifications'
	if o3 = ssz.ReadOffset(buf[104:108]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'ProposalJustifications'
	if o4 = ssz.ReadOffset(buf[108:112]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (0) 'Message'
	{
		buf = tail[o0:o1]
		if s.Message == nil {
			s.Message = new(Message)
		}
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Signers'
	{
		buf = tail[o1:o3]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}

		signers := make([]uint64, 0, len(s.Signers))
		for _, signer := range s.Signers {
			signers = append(signers, uint64(signer))
		}

		s.Signers = extendOperatorID(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = types.OperatorID(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}

	// Field (3) 'RoundChangeJustifications'
	{
		buf = tail[o3:o4]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.RoundChangeJustifications = make([]*SignedMessageHeader, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.RoundChangeJustifications[indx] == nil {
				s.RoundChangeJustifications[indx] = new(SignedMessageHeader)
			}
			if err = s.RoundChangeJustifications[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (4) 'ProposalJustifications'
	{
		buf = tail[o4:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.ProposalJustifications = make([]*SignedMessageHeader, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.ProposalJustifications[indx] == nil {
				s.ProposalJustifications[indx] = new(SignedMessageHeader)
			}
			if err = s.ProposalJustifications[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessage object
func (s *SignedMessage) SizeSSZ() (size int) {
	size = 112

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(Message)
	}
	size += s.Message.SizeSSZ()

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	// Field (3) 'RoundChangeJustifications'
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		size += 4
		size += s.RoundChangeJustifications[ii].SizeSSZ()
	}

	// Field (4) 'ProposalJustifications'
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		size += 4
		size += s.ProposalJustifications[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the SignedMessage object
func (s *SignedMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedMessage object with a hasher
func (s *SignedMessage) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signers'
	{
		if len(s.Signers) > 13 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(uint64(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.Signature)

	// Field (3) 'RoundChangeJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(s.RoundChangeJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.RoundChangeJustifications {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (4) 'ProposalJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(s.ProposalJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.ProposalJustifications {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the MessageHeader object
func (m *MessageHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MessageHeader object to a target array
func (m *MessageHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Height'
	dst = ssz.MarshalUint64(dst, uint64(m.Height))

	// Field (1) 'Round'
	dst = ssz.MarshalUint64(dst, uint64(m.Round))

	// Field (2) 'InputRoot'
	dst = append(dst, m.InputRoot[:]...)

	// Field (3) 'PreparedRound'
	dst = ssz.MarshalUint64(dst, uint64(m.PreparedRound))

	return
}

// UnmarshalSSZ ssz unmarshals the MessageHeader object
func (m *MessageHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 56 {
		return ssz.ErrSize
	}

	// Field (0) 'Height'
	m.Height = Height(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Round'
	m.Round = Round(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'InputRoot'
	copy(m.InputRoot[:], buf[16:48])

	// Field (3) 'PreparedRound'
	m.PreparedRound = Round(ssz.UnmarshallUint64(buf[48:56]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MessageHeader object
func (m *MessageHeader) SizeSSZ() (size int) {
	size = 56
	return
}

// HashTreeRoot ssz hashes the MessageHeader object
func (m *MessageHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MessageHeader object with a hasher
func (m *MessageHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Height'
	hh.PutUint64(uint64(m.Height))

	// Field (1) 'Round'
	hh.PutUint64(uint64(m.Round))

	// Field (2) 'InputRoot'
	hh.PutBytes(m.InputRoot[:])

	// Field (3) 'PreparedRound'
	hh.PutUint64(uint64(m.PreparedRound))

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedMessageHeader object
func (s *SignedMessageHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedMessageHeader object to a target array
func (s *SignedMessageHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(156)

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(MessageHeader)
	}
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Signature...)

	// Field (1) 'Signers'
	if len(s.Signers) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(s.Signers[ii]))
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessageHeader object
func (s *SignedMessageHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 156 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(MessageHeader)
	}
	if err = s.Message.UnmarshalSSZ(buf[0:56]); err != nil {
		return err
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[56:60]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 156 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[60:156]))
	}
	s.Signature = append(s.Signature, buf[60:156]...)

	// Field (1) 'Signers'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.Signers = extendOperatorID(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = types.OperatorID(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessageHeader object
func (s *SignedMessageHeader) SizeSSZ() (size int) {
	size = 156

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	return
}

// HashTreeRoot ssz hashes the SignedMessageHeader object
func (s *SignedMessageHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedMessageHeader object with a hasher
func (s *SignedMessageHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signers'
	{
		if len(s.Signers) > 13 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(uint64(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.Signature)

	hh.Merkleize(indx)
	return
}

var extendOperatorID = func(b []types.OperatorID, needLen int) []types.OperatorID {
	b = b[:cap(b)]
	if n := needLen - cap(b); n > 0 {
		b = append(b, make([]types.OperatorID, n)...)
	}
	return b[:needLen]
}