// Code generated by fastssz. DO NOT EDIT.
// Hash: 8010d78b491126f3592df05fe6d6e0a5efc1eacc4d9060bf77db191ceb8a5725
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Data object
func (d *Data) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the Data object to a target array
func (d *Data) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Root'
	dst = append(dst, d.Root[:]...)

	// Offset (1) 'Source'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.Source)

	// Field (1) 'Source'
	if len(d.Source) > 387173 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, d.Source...)

	return
}

// UnmarshalSSZ ssz unmarshals the Data object
func (d *Data) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Root'
	copy(d.Root[:], buf[0:32])

	// Offset (1) 'Source'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Source'
	{
		buf = tail[o1:]
		if len(buf) > 387173 {
			return ssz.ErrBytesLength
		}
		if cap(d.Source) == 0 {
			d.Source = make([]byte, 0, len(buf))
		}
		d.Source = append(d.Source, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Data object
func (d *Data) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Source'
	size += len(d.Source)

	return
}

// HashTreeRoot ssz hashes the Data object
func (d *Data) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the Data object with a hasher
func (d *Data) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Root'
	hh.PutBytes(d.Root[:])

	// Field (1) 'Source'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.Source))
		if byteLen > 387173 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(d.Source)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (387173+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Field (0) 'Height'
	dst = ssz.MarshalUint64(dst, uint64(m.Height))

	// Field (1) 'Round'
	dst = ssz.MarshalUint64(dst, uint64(m.Round))

	// Offset (2) 'Input'
	dst = ssz.WriteOffset(dst, offset)
	if m.Input == nil {
		m.Input = new(Data)
	}
	offset += m.Input.SizeSSZ()

	// Field (3) 'PreparedRound'
	dst = ssz.MarshalUint64(dst, uint64(m.PreparedRound))

	// Field (2) 'Input'
	if dst, err = m.Input.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Height'
	m.Height = Height(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Round'
	m.Round = Round(ssz.UnmarshallUint64(buf[8:16]))

	// Offset (2) 'Input'
	if o2 = ssz.ReadOffset(buf[16:20]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 28 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'PreparedRound'
	m.PreparedRound = Round(ssz.UnmarshallUint64(buf[20:28]))

	// Field (2) 'Input'
	{
		buf = tail[o2:]
		if m.Input == nil {
			m.Input = new(Data)
		}
		if err = m.Input.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 28

	// Field (2) 'Input'
	if m.Input == nil {
		m.Input = new(Data)
	}
	size += m.Input.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Height'
	hh.PutUint64(uint64(m.Height))

	// Field (1) 'Round'
	hh.PutUint64(uint64(m.Round))

	// Field (2) 'Input'
	if err = m.Input.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'PreparedRound'
	hh.PutUint64(uint64(m.PreparedRound))

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the signedMessageSSZ object
func (s *signedMessageSSZ) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the signedMessageSSZ object to a target array
func (s *signedMessageSSZ) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(112)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	if s.Message == nil {
		s.Message = new(Message)
	}
	offset += s.Message.SizeSSZ()

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Signature...)

	// Offset (3) 'RoundChangeJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		offset += 4
		offset += len(s.RoundChangeJustifications[ii])
	}

	// Offset (4) 'ProposalJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		offset += 4
		offset += len(s.ProposalJustifications[ii])
	}

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Signers'
	if len(s.Signers) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, s.Signers[ii])
	}

	// Field (3) 'RoundChangeJustifications'
	if len(s.RoundChangeJustifications) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.RoundChangeJustifications)
		for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(s.RoundChangeJustifications[ii])
		}
	}
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		if len(s.RoundChangeJustifications[ii]) > 400000 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.RoundChangeJustifications[ii]...)
	}

	// Field (4) 'ProposalJustifications'
	if len(s.ProposalJustifications) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.ProposalJustifications)
		for ii := 0; ii < len(s.ProposalJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(s.ProposalJustifications[ii])
		}
	}
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		if len(s.ProposalJustifications[ii]) > 400000 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.ProposalJustifications[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the signedMessageSSZ object
func (s *signedMessageSSZ) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 112 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3, o4 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 112 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[8:104]))
	}
	s.Signature = append(s.Signature, buf[8:104]...)

	// Offset (3) 'RoundChangeJustifications'
	if o3 = ssz.ReadOffset(buf[104:108]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'ProposalJustifications'
	if o4 = ssz.ReadOffset(buf[108:112]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (0) 'Message'
	{
		buf = tail[o0:o1]
		if s.Message == nil {
			s.Message = new(Message)
		}
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Signers'
	{
		buf = tail[o1:o3]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.Signers = ssz.ExtendUint64(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (3) 'RoundChangeJustifications'
	{
		buf = tail[o3:o4]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.RoundChangeJustifications = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 400000 {
				return ssz.ErrBytesLength
			}
			if cap(s.RoundChangeJustifications[indx]) == 0 {
				s.RoundChangeJustifications[indx] = make([]byte, 0, len(buf))
			}
			s.RoundChangeJustifications[indx] = append(s.RoundChangeJustifications[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (4) 'ProposalJustifications'
	{
		buf = tail[o4:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.ProposalJustifications = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 400000 {
				return ssz.ErrBytesLength
			}
			if cap(s.ProposalJustifications[indx]) == 0 {
				s.ProposalJustifications[indx] = make([]byte, 0, len(buf))
			}
			s.ProposalJustifications[indx] = append(s.ProposalJustifications[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the signedMessageSSZ object
func (s *signedMessageSSZ) SizeSSZ() (size int) {
	size = 112

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(Message)
	}
	size += s.Message.SizeSSZ()

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	// Field (3) 'RoundChangeJustifications'
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		size += 4
		size += len(s.RoundChangeJustifications[ii])
	}

	// Field (4) 'ProposalJustifications'
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		size += 4
		size += len(s.ProposalJustifications[ii])
	}

	return
}

// HashTreeRoot ssz hashes the signedMessageSSZ object
func (s *signedMessageSSZ) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the signedMessageSSZ object with a hasher
func (s *signedMessageSSZ) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signers'
	{
		if len(s.Signers) > 13 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.Signature)

	// Field (3) 'RoundChangeJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(s.RoundChangeJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.RoundChangeJustifications {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 400000 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (400000+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (4) 'ProposalJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(s.ProposalJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.ProposalJustifications {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 400000 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (400000+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}
