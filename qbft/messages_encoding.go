// Code generated by fastssz. DO NOT EDIT.
// Hash: 09fc593233caca846c7b4e0598392e05ee47b828920cb63768f8cacebe2ca67c
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Height'
	dst = ssz.MarshalUint64(dst, uint64(m.Height))

	// Field (1) 'Round'
	dst = ssz.MarshalUint64(dst, uint64(m.Round))

	// Field (2) 'InputRoot'
	dst = append(dst, m.InputRoot[:]...)

	// Field (3) 'PreparedRound'
	dst = ssz.MarshalUint64(dst, uint64(m.PreparedRound))

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 56 {
		return ssz.ErrSize
	}

	// Field (0) 'Height'
	m.Height = Height(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Round'
	m.Round = Round(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'InputRoot'
	copy(m.InputRoot[:], buf[16:48])

	// Field (3) 'PreparedRound'
	m.PreparedRound = Round(ssz.UnmarshallUint64(buf[48:56]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 56
	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Height'
	hh.PutUint64(uint64(m.Height))

	// Field (1) 'Round'
	hh.PutUint64(uint64(m.Round))

	// Field (2) 'InputRoot'
	hh.PutBytes(m.InputRoot[:])

	// Field (3) 'PreparedRound'
	hh.PutUint64(uint64(m.PreparedRound))

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the signedMessageSSZ object
func (s *signedMessageSSZ) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the signedMessageSSZ object to a target array
func (s *signedMessageSSZ) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(168)

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(Message)
	}
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Signature...)

	// Offset (3) 'InputSource'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.InputSource)

	// Offset (4) 'RoundChangeJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		offset += 4
		offset += len(s.RoundChangeJustifications[ii])
	}

	// Offset (5) 'ProposalJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		offset += 4
		offset += len(s.ProposalJustifications[ii])
	}

	// Field (1) 'Signers'
	if len(s.Signers) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, s.Signers[ii])
	}

	// Field (3) 'InputSource'
	if len(s.InputSource) > 1125899907230335 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.InputSource...)

	// Field (4) 'RoundChangeJustifications'
	if len(s.RoundChangeJustifications) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.RoundChangeJustifications)
		for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(s.RoundChangeJustifications[ii])
		}
	}
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		if len(s.RoundChangeJustifications[ii]) > 2516 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.RoundChangeJustifications[ii]...)
	}

	// Field (5) 'ProposalJustifications'
	if len(s.ProposalJustifications) > 13 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.ProposalJustifications)
		for ii := 0; ii < len(s.ProposalJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(s.ProposalJustifications[ii])
		}
	}
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		if len(s.ProposalJustifications[ii]) > 176 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.ProposalJustifications[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the signedMessageSSZ object
func (s *signedMessageSSZ) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 168 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o3, o4, o5 uint64

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(Message)
	}
	if err = s.Message.UnmarshalSSZ(buf[0:56]); err != nil {
		return err
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[56:60]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 168 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[60:156]))
	}
	s.Signature = append(s.Signature, buf[60:156]...)

	// Offset (3) 'InputSource'
	if o3 = ssz.ReadOffset(buf[156:160]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'RoundChangeJustifications'
	if o4 = ssz.ReadOffset(buf[160:164]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'ProposalJustifications'
	if o5 = ssz.ReadOffset(buf[164:168]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (1) 'Signers'
	{
		buf = tail[o1:o3]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.Signers = ssz.ExtendUint64(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (3) 'InputSource'
	{
		buf = tail[o3:o4]
		if len(buf) > 1125899907230335 {
			return ssz.ErrBytesLength
		}
		if cap(s.InputSource) == 0 {
			s.InputSource = make([]byte, 0, len(buf))
		}
		s.InputSource = append(s.InputSource, buf...)
	}

	// Field (4) 'RoundChangeJustifications'
	{
		buf = tail[o4:o5]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.RoundChangeJustifications = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 2516 {
				return ssz.ErrBytesLength
			}
			if cap(s.RoundChangeJustifications[indx]) == 0 {
				s.RoundChangeJustifications[indx] = make([]byte, 0, len(buf))
			}
			s.RoundChangeJustifications[indx] = append(s.RoundChangeJustifications[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (5) 'ProposalJustifications'
	{
		buf = tail[o5:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.ProposalJustifications = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 176 {
				return ssz.ErrBytesLength
			}
			if cap(s.ProposalJustifications[indx]) == 0 {
				s.ProposalJustifications[indx] = make([]byte, 0, len(buf))
			}
			s.ProposalJustifications[indx] = append(s.ProposalJustifications[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the signedMessageSSZ object
func (s *signedMessageSSZ) SizeSSZ() (size int) {
	size = 168

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	// Field (3) 'InputSource'
	size += len(s.InputSource)

	// Field (4) 'RoundChangeJustifications'
	for ii := 0; ii < len(s.RoundChangeJustifications); ii++ {
		size += 4
		size += len(s.RoundChangeJustifications[ii])
	}

	// Field (5) 'ProposalJustifications'
	for ii := 0; ii < len(s.ProposalJustifications); ii++ {
		size += 4
		size += len(s.ProposalJustifications[ii])
	}

	return
}

// HashTreeRoot ssz hashes the signedMessageSSZ object
func (s *signedMessageSSZ) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the signedMessageSSZ object with a hasher
func (s *signedMessageSSZ) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signers'
	{
		if len(s.Signers) > 13 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (2) 'Signature'
	if len(s.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.Signature)

	// Field (3) 'InputSource'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.InputSource))
		if byteLen > 1125899907230335 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(s.InputSource)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1125899907230335+31)/32)
	}

	// Field (4) 'RoundChangeJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(s.RoundChangeJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.RoundChangeJustifications {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 2516 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (2516+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (5) 'ProposalJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(s.ProposalJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.ProposalJustifications {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 176 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (176+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}
